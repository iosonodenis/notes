### Type definitions saved at 2023-02-26T08:31:26.980Z ###

enum RemoteFileFit {
  COVER
  FILL
  OUTSIDE
  CONTAIN
}

enum RemoteFileFormat {
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum RemoteFileLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum RemoteFilePlaceholder {
  DOMINANT_COLOR
  BLURRED
  TRACED_SVG
  NONE
}

enum RemoteFileCropFocus {
  CENTER
  TOP
  RIGHT
  BOTTOM
  LEFT
  ENTROPY
  EDGES
  FACES
}

type RemoteFileResize {
  width: Int
  height: Int
  src: String
}

"""Remote Interface"""
interface RemoteFile {
  id: ID!
  mimeType: String!
  filename: String!
  filesize: Int
  width: Int
  height: Int
  publicUrl: String!
  resize(
    width: Int
    height: Int
    aspectRatio: Float
    fit: RemoteFileFit = COVER

    """
    
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    format: RemoteFileFormat = AUTO
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): RemoteFileResize

  """
  Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info.
  """
  gatsbyImage(
    """
    
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    
    """
    layout: RemoteFileLayout = CONSTRAINED

    """
    
    The display width of the generated image for layout = FIXED, and the display
    width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    
    """
    width: Int

    """
    
    If set, the height of the generated image. If omitted, it is calculated from
    the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    """
    placeholder: RemoteFilePlaceholder = DOMINANT_COLOR

    """
    
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    
    """
    aspectRatio: Float

    """
    
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    
    """
    formats: [RemoteFileFormat!] = [AUTO, WEBP, AVIF]

    """
    
    A list of image pixel densities to generate for FIXED and CONSTRAINED
    images. You should rarely need to change this. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, and [0.25, 0.5, 1, 2]
    for fluid. In this case, an image with a fluid layout and width = 400 would
    generate images at 100, 200, 400 and 800px wide.
    
    """
    outputPixelDensities: [Float] = [0.25, 0.5, 1, 2]

    """
    
    Specifies the image widths to generate. You should rarely need to change
    this. For FIXED and CONSTRAINED images it is better to allow these to be
    determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    
    """
    breakpoints: [Int] = [750, 1080, 1366, 1920]

    """
    
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to
    decide which images to download. You can leave this blank for fixed images,
    or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    
    """
    sizes: String

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
    fit: RemoteFileFit = COVER
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): GatsbyImageData
}

type File implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
}

type Directory implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
}

type Site implements Node @dontInfer {
  buildTime: Date @dateformat
  siteMetadata: SiteSiteMetadata
  polyfill: Boolean
  pathPrefix: String
  jsxRuntime: String
  trailingSlash: String
  graphqlTypegen: Boolean
}

type SiteSiteMetadata {
  title: String
  description: String
}

type SiteFunction implements Node @dontInfer {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
}

type SitePage implements Node @dontInfer {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
  pageContext: JSON @proxy(from: "context", fromNode: false)
  pluginCreator: SitePlugin @link(by: "id", from: "pluginCreatorId")
}

type SitePlugin implements Node @dontInfer {
  resolve: String
  name: String
  version: String
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  pluginOptions: JSON
  packageJson: JSON
}

type SiteBuildMetadata implements Node @dontInfer {
  buildTime: Date @dateformat
}

type MarkdownHeading {
  id: String
  value: String
  depth: Int
}

enum MarkdownHeadingLevels {
  h1
  h2
  h3
  h4
  h5
  h6
}

enum MarkdownExcerptFormats {
  PLAIN
  HTML
  MARKDOWN
}

type MarkdownWordCount {
  paragraphs: Int
  sentences: Int
  words: Int
}

type MarkdownRemark implements Node @childOf(mimeTypes: ["text/markdown", "text/x-markdown"], types: ["BrainNote"]) @derivedTypes @dontInfer {
  frontmatter: MarkdownRemarkFrontmatter
  excerpt: String
  rawMarkdownBody: String
}

type BrainNote implements Node @derivedTypes @dontInfer {
  title: String!
  slug: String!
  rawContent: String
  content: String
  noteTemplate: String
  aliases: [String]
  outboundReferences: [String]
  outboundReferenceNotes: [BrainNote] @link(by: "id", from: "outboundReferenceNotes___NODE")
  inboundReferences: [String]
  inboundReferenceNotes: [BrainNote] @link(by: "id", from: "inboundReferenceNotes___NODE")
  inboundReferencePreview: [InboundReferencePreview]
  externalInboundReferences: [ExternalInboundReference]
  externalOutboundReferences: [ExternalOutboundReference]
  childMdx: Mdx
  absolutePath: String
  inboundReferencePreviews: [BrainNoteInboundReferencePreviews]
}

type ExternalInboundReference {
  siteName: String!
  sourcePage: String!
  sourceUrl: String!
  previewHtml: String!
}

type ExternalOutboundReference {
  targetSite: String!
  targetPage: String!
  previewHtml: String!
}

type InboundReferencePreview {
  source: String!
  previewHtml: String!
}

type MdxFrontmatter {
  title: String!
}

type MdxHeadingMdx {
  value: String
  depth: Int
}

enum HeadingsMdx {
  h1
  h2
  h3
  h4
  h5
  h6
}

type MdxWordCount {
  paragraphs: Int
  sentences: Int
  words: Int
}

type Mdx implements Node @childOf(mimeTypes: ["text/markdown", "text/x-markdown"], types: ["BrainNote"]) @dontInfer {
  rawBody: String!
  fileAbsolutePath: String!
  frontmatter: MdxFrontmatter
  slug: String
  body: String!
  excerpt(pruneLength: Int = 140, truncate: Boolean): String!
  headings(depth: HeadingsMdx): [MdxHeadingMdx]
  html: String
  mdxAST: JSON
  tableOfContents(maxDepth: Int): JSON
  timeToRead: Int
  wordCount: MdxWordCount
}

type MarkdownRemarkFrontmatter {
  title: String
}

type BrainNoteInboundReferencePreviews {
  source: String
  previewMarkdown: String
  previewHtml: String
}